rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAnonymous() {
      return request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    match /sounds/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    match /defaultStories/{document} {
      // Anyone can read default stories
      allow read: if true;
      // Only admins can write/update/delete default stories
      allow write, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /analytics/{analytics_id} {
      allow create: if true;
      allow read, write: if request.auth != null; //&& request.auth.uid == resource.data.userId;
    }

    // Rule for AllCharacterVoters collection
    match /AllCharacterVoters/{document} {
      allow read: if request.auth != null;  // Allow read access if the user is authenticated
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;  // Allow write access if the user is authenticated and writing their own data
    }
     match /users/{userId}/storyProgress/{characterId} {
     allow read, write: if request.auth != null && request.auth.uid == userId;
   }
   
   match /users/{userId}/chatHistory/{storyId} {
     allow read, write: if request.auth != null && request.auth.uid == userId;
   }
      // Custom stories
      match /users/{userId}/customStories/{characterId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId;
      }
      
match /feedback/{feedbackid} {
      allow read: if false;
      allow create: if request.auth != null;
    }
match /userInteractions/{userId} {
      allow read, write: if request.auth != null && userId == request.auth.uid;
    }
match /features/{featureId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
match /userVotes/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    // Rule for stats/activeUserCount document
    match /stats/activeUserCount {
      allow read: if request.auth != null;  // Allow read access if the user is authenticated
    } 

    // Rule for gem_purchases collection
    match /gem_purchases/{document} {
      allow write: if request.method == 'create';  // Allow write access for creating documents
      allow read: if true;  // Allow read access for everyone
    }

    // Rule for dashboard collection
    match /dashboard/{document} {
      allow read, write: if true;  // Allow read and write access for everyone (public)
    }

    // Rule for goodFeedback collection
    match /goodFeedback/{document} {
      allow read: if false;  // Disallow read access
      allow create: if request.auth != null && request.resource.data.keys().hasAll(['prompt', 'response', 'timestamp']);  // Allow create access if the user is authenticated and the document contains the required fields
      allow update, delete: if false;  // Disallow update and delete access
    }

    // Rule for badFeedback collection
    match /badFeedback/{document} {
      allow read: if false;  // Disallow read access
      allow create: if request.auth != null && request.resource.data.keys().hasAll(['prompt', 'response', 'timestamp']);  // Allow create access if the user is authenticated and the document contains the required fields
      allow update, delete: if false;  // Disallow update and delete access
    }

    // Rule for votingCharacters collection
    match /votingCharacters/{document} {
      allow create: if request.auth != null;  // Allow create access if the user is authenticated
      allow update, delete: if request.auth != null && (resource.data.createdBy == request.auth.uid || request.auth.email == "admin@test.com");  // Allow update and delete access if the user is authenticated and is the creator of the document or an admin
      allow read: if true;  // Allow read access for everyone
    }

    // Rule for winners collection
    match /winners/{document} {
      allow read: if true;  // Allow read access for everyone
      allow create, update: if request.auth != null;  // Allow create and update access if the user is authenticated
      allow delete: if request.auth != null && request.auth.email == "admin@test.com";  // Allow delete access if the user is an admin
    }

    // Rule for characters, newCharacters, stories, customStories, allStories, deadlines, quests, and customCharacters collections
    match /characters/{characterId} {
      allow read: if request.auth != null;
      
      match /stories/{document=**} {
        allow read: if request.auth != null;
      }
    }

    match /newCharacters/{document=**} {
      allow read: if true;  // Allow read access for everyone
    }

    match /stories/{document=**} {
      allow read: if true;  // Allow read access for everyone
    }

    match /customStories/{document=**} {
      allow read, write: if true;  // Allow read and write access for everyone
    }

    match /allStories/{document=**} {
      allow read, write: if true;  // Allow read and write access for everyone
    }

    match /deadlines/{document=**} {
      allow read: if true;  // Allow read access for everyone
    }

    match /quests/{document=**} {
      allow read: if true;  // Allow read access for everyone
    }

    match /customCharacters/{document=**} {
      allow read, write: if true;  // Allow read and write access for everyone
    }

    // Rule for chats collection
    match /chats/{chatId} {
      allow read, write: if request.auth != null && chatId.matches('.*' + request.auth.uid + '.*');  // Allow read and write access if the user is authenticated and is part of the chat
    }

    // Rule for users collection
    match /users/{userId} {
      // Allow read access if the user is authenticated and accessing their own data,
      // or for leaderboard purposes
      allow read: if request.auth != null && 
                  (request.auth.uid == userId || 
                   (request.query.limit <= 5 && request.query.orderBy == 'totalVotes'));
      
      // Allow write access if the user is authenticated and writing their own data
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow create access if the user is authenticated
      allow create: if request.auth != null;
    }

    // New rule for affiliate program
    match /users/{userId} {
      // Allow reading user documents for affiliate signup counting
      allow read: if request.auth != null && 
                  resource.data.conversionTrackingId == request.auth.uid;
    }
    match /usersTest/{userId} {
      // Allow reading user documents for affiliate signup counting
      allow read, write: if request.auth != null;
    }
    // Admin check function
    function isAdmin(userId) {
      return request.auth.token.admin == true;
    }

    // Gem-related security functions
    function hasOverMillionGems(gemCount) {
      return gemCount > 1000000;
    }

    function isGemChangeValid(currentGems, newGems) {
      return newGems <= currentGems || (newGems - currentGems) <= 300;
    }
  }
}